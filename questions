
// 1. Extract the first and third elements from the array numbers = [5, 10, 15, 20] using destructuring.


// let numbers = [5, 10, 15, 20]
// let [a, ,c] = numbers
// console.log(a, c)

// 2. Swap the values of a and b using array destructuring.

// let numbers = [5, 10, 15, 20]

// let [a, b] = numbers;
// [a, b] = [b, a]

// console.log(a, b)

// // 3. Destructure the object {name: "John", age: 25, city: "New York"} to extract name and city into separate variables.

// let obj =  {name: "John", age: 25, city: "New York"};

// let {name, city} = obj
// console.log(name, city)


// 4. Using destructuring, assign a default value of "Guest" to user if it is not present in the object {id: 101}.

// let obj = {id: 101}
// let {id, user = "Guest"} = obj;
// let nObj = {id, user}
// console.log(nObj)

// 5. Extract first and last from the nested object {person: {first: "Alice", last: "Johnson"}} using destructuring.

// let obj = {person: {first: "Alice", last: "Johnson"}}

// console.log(obj.person.first, obj.person.last)


// 6. Use array destructuring to ignore the second element of [100, 200, 300] and store the rest in another variable.

// let arr = [100, 200, 300]

// let [a, ,...c] = arr // if i have to include first element also
// console.log(a,c)

// 7. Destructure the array [1, 2, 3, 4] inside a function parameter and return the sum of all elements.

// let arr =  [1, 2, 3, 4]

// function name([a,b,c,d]) {
    
//     let sum = a+b+c+d
//     console.log(sum)
//     return sum;
// }
// name(arr)

// 8. Destructure an object {name: "David", age: 30, job: "Developer"} and rename job to profession.

// let obj = {name: "David", age: 30, job: "Developer"}

// let { name, age, job: profession } = obj

// console.log(name, age, profession)

// 9. Destructure the following nested array [[1, 2], [3, 4]] to extract 1 and 4.

// let arr = [[1, 2], [3, 4]]
// let [[f] = a,[ ,l] = b] = arr
// console.log(f,l)

// //or

// let flated = arr.flat(Infinity);
// let [a, , , d] = flated;
// console.log(a,d);

// // 10. Destructure an array [10, 20] and swap the values inside an if condition only if the first value is smaller than the second.

// let arr = [10, 20]
// let [a, b] = arr

// if(a < b){

//     [a, b] = [ b, a]
// }
// console.log(a, b)


// 11. Destructure the object {user: {id: 5, info: {name: "Sam", city: "Paris"}}} and extract name and city.

// let obj = {user: {id: 5, info: {name: "Sam", city: "Paris"}}};

// let {user: {info: {name, city}}}  = obj;


// 12. Given an array [10, [20, 30], 40], destructure it to extract 10, 30, and 40 into separate variables.

// let arr = [10, [20, 30], 40]
// let [a, [f] = b, c] = arr
// console.log(a,f,c)

// 13. Using array destructuring, loop over an array [[1, "one"], [2, "two"], [3, "three"]] and print each key-value pair.

// let arr = [[1, "one"], [2, "two"], [3, "three"]]

// for (const [key, val] of arr) {
//     console.log(key,val);
// }

// 14. Write a function that takes an object {a: 5, b: 10, c: 15} as an argument and returns the sum of a and c using destructuring.

// function name({a,b,c}) {
//     let sum = a+ b+ c;
//     console.log(sum)
// }
// name({a: 5, b: 10, c: 15})

// 15. Destructure a nested object {data: {user: {id: 3, details: {age: 25, country: "India"}}}} and extract id and country.

// let obj = {data: {user: {id: 3, details: {age: 25, country: "India"}}}}
// let {data: {user: {id, details:{country}}}} = obj
// console.log(id, country);


// 16. Given const obj = {a: [1, 2, {b: 3}], c: {d: 4, e: [5, 6]}}, destructure to extract 3 and 6.

// const obj = {a: [1, 2, {b: 3}], c: {d: 4, e: [5, 6]}}

// let {a: [, ,{b}], c:{e:[ ,s]}} = obj
// console.log(b, s)

// 17. Destructure an object {items: [{price: 100}, {price: 200}], discount: 0.1} to calculate the total price after discount.

// let obj = {items: [{price: 100}, {price: 200}], discount: 0.1}

// let {items: [{price: price1}, {price: price2}], discount} = obj

// console.log(price1, price2, discount);

// function totalPrice(price1, price2, discount){
//     let tt = (price1 + price2) - ((price1 + price2)*0.1/100)
//     console.log(tt)
// }
// totalPrice(price1, price2, discount);




// 18. Use destructuring in function parameters to pass {name: "Alice", scores: [80, 90, 100]} and return the average score.

// let obj = {name: "Alice", scores: [80, 90, 100]}

// let {name, scores:[a, b, c]} = obj

// let avg = (a+b+c)/3
// console.log(name, ",score", avg);

// 19. Given const users = [{id: 1, name: "John"}, {id: 2, name: "Jane"}], use destructuring inside map() to extract id and name.

// let arr =  [{id: 1, name: "John"}, {id: 2, name: "Jane"}]

// let ext = arr.map((obj) => {

//     let {id, name} = obj
//     console.log(id, name)
//     return [id, name]
// })

// console.log(ext)

// 20. Destructure an array [["x", 1], ["y", 2], ["z", 3]] using forEach() and log "Key: x, Value: 1" format for each pair.

// let arr = [["x", 1], ["y", 2], ["z", 3]]

// arr.forEach((inner) => {
//     let [a, b] = inner;
//     console.log(`key: ${a}, value:${b}`)
// })